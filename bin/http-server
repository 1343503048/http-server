#!/usr/bin/env node

require.paths.unshift(require('path').join(__dirname, '..', 'vendor'));

var path = require('path'),
    eyes = require('eyes'),
    colors = require('colors'),
    static = require('../vendor/node-static/lib/node-static'),
    http = require('http'),
    argv = require('optimist').argv;

var help = [
    "usage: http-server [path] [options]",
    "",
    "options:",
    " -p Port to use [8080]",
    " -a Address to use [localhost]",
    " -s --silent Suppress log messages from output",
    " -h --help Print this list and exit.",
].join('\n');

function log (message) {
  if (!argv.s && !argv.silent) {
    console.log(message);
  }
}

function inspect (obj) {
  if (!argv.s || !argv.silent) {
    eyes.inspect(obj);
  }
}

if (argv.h) {
  return console.log(help);
}

try {
    var root = argv._[0] || ".",
        port = argv.p || 8080,
        host = argv.a || 'localhost',
        cache = argv.c || 3600
        AutoIndex = argv.i || true;
        
        
        console.log(AutoIndex);
    var file = new(static.Server)(root, { AutoIndex: AutoIndex, cache: Number(cache) }); 
   //createServer(argv.p || 8080, options);
    log('Starting up http-server, serving '.yellow + root.cyan + ' on port: '.yellow + port.toString().cyan);
    try {
        http.createServer(function(request, response) {
          //console.log('Request: ', request);
          //console.log('Response: ', response);
          request.on('end', function() {
            log('['.grey+'served'.yellow+'] '.grey + request.url);
            return file.serve(request, response);
          });
        }).listen(port, host);
    } catch (err) {
        return callback({
            message: err.message
        });
    }
    log('http-server successfully started: '.green + host.cyan + ':'.cyan + port.toString().cyan);
    log('Hit CTRL-C to stop the server')
    process.on('SIGINT', function() {
        log('http-server stopped.'.red);
        return process.exit();
    });
}
catch (err) {
  log(err, console.dir(options));
}
